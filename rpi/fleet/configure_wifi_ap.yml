---
- name: Configure Raspberry Pi as WiFi Access Point
  hosts: localhost
  become: true

  vars:
    wifi_ssid: PiFi
    wifi_password: P@ssw0rd

  tasks:
    - name: Enable serial console
      lineinfile:
        dest: /boot/firmware/config.txt
        insertafter: "[all]"
        line: "enable_uart=1"
      register: enable_uart

    - name: Shutdown for switchover to serial console
      ansible.builtin.shell:
        cmd: "shutdown -h now"
      when: enable_uart.changed

    - name: Look up the system's apt configuration
      ansible.builtin.shell:
        cmd: apt-cache policy | awk '/origin/ { print $2 }'
      register: apt_origins

    - name: Get the first apt repository hostname
      set_fact:
        apt_repo: "{{ apt_origins.stdout_lines | first }}"

    - name: Check connectivity to apt repository
      ansible.builtin.debug:
        msg: "{{ lookup('community.general.dig', '{{ apt_repo }}.')}}"
      ignore_errors: true
      register: connectivity_test
      # will fail if not connected to the internet.

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes
      when: connectivity_test.failed is not true

    - name: Install web-based Secure Shell
      ansible.builtin.apt:
        name: shellinabox
      when: connectivity_test.failed is not true

    - name: Install network discovery tool
      ansible.builtin.apt:
        name: nmap
      when: connectivity_test.failed is not true

    - name: Install web server
      ansible.builtin.apt:
        name: nginx
      when: connectivity_test.failed is not true

    - name: Set up WiFi access point connection
      community.general.nmcli:
        conn_name: "{{ wifi_ssid | lower }}"
        type: wifi
        ifname: wlan0
        ssid: "{{ wifi_ssid }}"
        wifi:
          band: bg
          hidden: false
          mode: ap
        wifi_sec:
          key-mgmt: wpa-psk
          psk: "{{ wifi_password }}"
        method4: shared
        state: present
      notify:
        - Create a new resolv.conf file
        - Add this host as a nameserver
        - Delete WiFi station connection
        - Restart to activate changes

    - name: Set hostname to match SSID
      ansible.builtin.hostname:
        name: "{{ wifi_ssid | lower }}"
      notify:
        - Create a new hosts file
        - Add the loopback address
        - Add this host's address(es)

  handlers:
    - name: Create a new hosts file
      ansible.builtin.copy:
        content: ""
        dest: /etc/hosts
        owner: root
        group: root
        mode: '0644'

    - name: Add the loopback address
      ansible.builtin.lineinfile:
        path: /etc/hosts
        search_string: "127.0.0.1"
        line: "127.0.0.1\tlocalhost"

    - name: Add this host's address(es)
      ansible.builtin.lineinfile:
        path: /etc/hosts
        search_string: "{{ item }}"
        line: "{{ item }}\t{{ wifi_ssid | lower }}"
      with_items: "{{ ansible_all_ipv4_addresses }}"

    - name: Create a new resolv.conf file
      ansible.builtin.copy:
        dest: /etc/resolv.conf
        content: ""
        owner: root
        group: root
        mode: '0644'

    - name: Add this host as a nameserver
      ansible.builtin.lineinfile:
        path: /etc/resolv.conf
        line: "nameserver {{ ansible_all_ipv4_addresses | first }}"

    - name: Delete WiFi station connection
      community.general.nmcli:
        conn_name: "preconfigured"
        state: absent

    - name: Restart to activate changes
      ansible.builtin.shell:
        cmd: "shutdown -r now"


# References:
# https://learn.adafruit.com/adafruits-raspberry-pi-lesson-5-using-a-console-cable/
# https://raymii.org/s/tutorials/Ansible_-_Only-do-something-if-another-action-changed.html
# https://raspberrytips.com/access-point-setup-raspberry-pi/
# https://docs.ansible.com/ansible/latest/collections/community/general/nmcli_module.html
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/hostname_module.html
# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_handlers.html
